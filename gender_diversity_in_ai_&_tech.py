# -*- coding: utf-8 -*-
"""Gender Diversity in AI & Tech.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n2zv9IO4g6-sXmSwNAnK8jyo951BRgD5
"""

#Importing relevant libraries
import pandas as pd
from fbprophet import Prophet
import matplotlib.pyplot as plt
from fbprophet.plot import plot
import seaborn as sns

#Reading file and holding it in a dataframe labelled 'df'
df = pd.read_csv('DiversityTech.csv',thousands=',',parse_dates=True)

#Viewing first 5 rows
df.head()

#Checking current data types for each column
df.dtypes

#Ammending data types
df['Day'] = df['Day'].astype(int)
df['Year'] = df['Year'].astype(int)
df['Date'] = pd.to_datetime(df['Date'])
df['Quarter'] = df['Quarter'].astype(int)
df['Female Employment'] = df['Female Employment'].astype(int)
df['Male Employment'] = df['Male Employment'].astype(int)
df['Total'] = df['Total'].astype(int)

#Creating df labelled viz to hold sector info
viz=df[['Sector', 'Total']]

#Grouping by sector to show sum of each
viz=viz.groupby(by='Sector').sum()

#Defining whether each sector is Tech, non Tech or undefined
Type=['Non Technical', 'Non Technical', 'Non Technical', 'Non Technical', 'Non Technical', 'Technical', 'Non Technical', 'Technical', 'Non Technical', 'Non Technical', 'Undefined', 'Undefined', 'Technical', 'Undefined', 'Undefined', 'Non Technical','Non Technical', 'Non Technical']

#Appending column to the df 'viz'
viz['Type']=Type

#Reset index
viz.reset_index()

#Plotting sectors and their type
sns.catplot(x="Sector",y="Total",kind='bar',hue='Type',data=viz,height=6.27, aspect=11.7/6.27)
plt.xticks(rotation=90)
plt.gcf().axes[0].yaxis.get_major_formatter().set_scientific(False)
plt.title('Split of Original Industries')

#Defining Techdf holding technical sectors
Techdf = df.loc[df["Sector"] == 'Information & communication']
Techdf = Techdf.append(df.loc[df["Sector"] == 'Financial & insurance activities'])
Techdf=Techdf.append(df.loc[df['Sector'] == 'Professional, scientific & technical activities'])
Techdf = df.loc[df["Sector"] == 'Information & communication']
Techdf = Techdf.append(df.loc[df["Sector"] == 'Financial & insurance activities'])
Techdf=Techdf.append(df.loc[df['Sector'] == 'Professional, scientific & technical activities'])

#Defining NonTechdf holding non technical sectors
NonTechdf = df.loc[df['Sector'] == 'Education']
NonTechdf = NonTechdf.append(df.loc[df["Sector"] == 'Human health & social work activities'])
NonTechdf=NonTechdf.append(df.loc[df['Sector'] == 'Administrative & support services'])
NonTechdf=NonTechdf.append(df.loc[df['Sector'] == 'Manufacturing'])
NonTechdf=NonTechdf.append(df.loc[df['Sector'] == 'Mining, energy and water supply'])
NonTechdf=NonTechdf.append(df.loc[df['Sector'] == 'Agriculture, forestry & fishing'])
NonTechdf=NonTechdf.append(df.loc[df['Sector'] == 'Wholesale, retail & repair of motor vehicles'])
NonTechdf=NonTechdf.append(df.loc[df['Sector'] == 'Construction'])
NonTechdf=NonTechdf.append(df.loc[df['Sector'] == 'Real estate activities'])
NonTechdf=NonTechdf.append(df.loc[df['Sector'] == 'Accommod-ation & food services'])
NonTechdf=NonTechdf.append(df.loc[df['Sector'] == 'Transport & storage'])

#Visualising current data for gender diversity in Non Tech industries
plt.plot(NonTechdf.index,NonTechdf['Male Employment'], linestyle='--', label='Male')
plt.plot(NonTechdf.index,NonTechdf['Female Employment'], linestyle='--', label ='Female')
plt.gcf().axes[0].yaxis.get_major_formatter().set_scientific(False)
plt.xlabel('Year')
plt.ylabel('No. of employees')
plt.xticks(rotation=90)

plt.legend()
plt.title('Non Tech industries')

#Visualising current data for gender diversity in Tech industries
plt.plot(Techdf.index,Techdf['Male Employment'], linestyle='--', label='Male')
plt.plot(Techdf.index,Techdf['Female Employment'], linestyle='--', label ='Female')
plt.gcf().axes[0].yaxis.get_major_formatter().set_scientific(False)
plt.xlabel('Year')
plt.ylabel('No. of employees')
plt.legend()
plt.title('Tech industries')

#Defining female Tech df 
FemaleTechdf=Techdf[['Date', 'Female Employment']]
#Grouping dataframe by date
FemaleTechdf=FemaleTechdf.groupby(by="Date", dropna=False).sum()
#Resetting index so date is not the index, but is the first column
FemaleTechdf=FemaleTechdf.reset_index()
#Labelling datetime column 'ds' and our prediction variable as 'y' for compatibility with fbprophet
FemaleTechdf.columns=['ds','y']

#Defining and fitting model
f=Prophet()
f.fit(FemaleTechdf)

#Defining prediction period in the future and holding in df 'future'
future=f.make_future_dataframe(periods=40,freq='Q')

#Making predictions with prophet on future date range
forecast=f.predict(future)
forecast[['ds', 'yhat', 'yhat_upper','yhat_lower']].tail()

#Plotting results
fig1=f.plot(forecast, figsize=(30,10))
#Below line allows us to see the y axis figures in full
plt.gcf().axes[0].yaxis.get_major_formatter().set_scientific(False)
#Setting title
plt.title('Female Tech Employment', size=40)
#Setting x and y labels
plt.xlabel('Date',size=30)
plt.ylabel('No. of employees',size=30)
plt.tick_params(axis='both', which='major', labelsize=20)
plt.show()

#Defining Male Tech df 
MaleTechdf=Techdf[['Date', 'Male Employment']]
#Grouping dataframe by date
MaleTechdf=MaleTechdf.groupby(by='Date', dropna=False).sum()
#Resetting index so date is not the index
MaleTechdf=MaleTechdf.reset_index()
#Naming columns 'ds' and 'y' for compatibility with prophet
MaleTechdf.columns=['ds','y']

#Fitting model
m=Prophet()
m.fit(MaleTechdf)

#Creating future dates in dataframe 'future'
future=m.make_future_dataframe(periods=40, freq='Q')

#Making predictions
forecast=m.predict(future)
forecast[['ds', 'yhat','yhat_upper','yhat_lower']].tail()

#Plotting results
fig2=m.plot(forecast, figsize=(30,10))

#Below allows us to see full y axis figures
plt.gcf().axes[0].yaxis.get_major_formatter().set_scientific(False)

#Setting title
plt.title('Male Tech Employment', size=40)

#Setting x and y labels
plt.xlabel('Date',size=30)
plt.ylabel('No. of employees',size=30)
plt.tick_params(axis='both', which='major', labelsize=20)

#Defining Female Non Tech df 
FemaleNonTechdf=NonTechdf[['Date', 'Female Employment']]

#Grouping by date
FemaleNonTechdf=FemaleNonTechdf.groupby(by='Date', dropna=False).sum()

#Resetting index so 'Date' is column rather than index
FemaleNonTechdf=FemaleNonTechdf.reset_index()

#Labelling columns 'ds' and 'y' for compatability with prophet 
FemaleNonTechdf.columns=['ds','y']

#Defininf and fitting model to data
Fn=Prophet()
Fn.fit(FemaleNonTechdf)

#Defining future prediction period
future=Fn.make_future_dataframe(periods=40, freq='q')

#Making predictions
forecast=Fn.predict(future)
forecast[['ds', 'yhat', 'yhat_upper','yhat_lower']].tail()

#plot results
fig2=Fn.plot(forecast, figsize=(30,10))

#Below line allows us to see full y axis figures
plt.gcf().axes[0].yaxis.get_major_formatter().set_scientific(False)

#Set title
plt.title('Female Non Tech Employment', size=40)

#Set x and y labels
plt.xlabel('Date',size=30)
plt.ylabel('No. of employees',size=30)
plt.tick_params(axis='both', which='major', labelsize=20)

#Defining Male Non Tech df 
MaleNonTechdf=NonTechdf[['Date', 'Male Employment']]

#Grouping by date
MaleNonTechdf=MaleNonTechdf.groupby(by='Date', dropna=False).sum()

#Resetting index so 'Date' is a column and not the index
MaleNonTechdf=MaleNonTechdf.reset_index()

#Labelling columns 'ds' and 'y' for compatibility with prophet model
MaleNonTechdf.columns=['ds','y','yhat_upper','yhat_lower']

#Defining and fitting model
Mn=Prophet()
Mn.fit(MaleNonTechdf)

#Defining future prediction dates
future=Mn.make_future_dataframe(periods=40, freq='q')

#Making prediction 
forecast=Mn.predict(future)
forecast[['ds', 'yhat']].tail()

#Plotting results
fig2=Mn.plot(forecast, figsize=(30,10))

#Below line allows us to see y values fully
plt.gcf().axes[0].yaxis.get_major_formatter().set_scientific(False)

#Set title
plt.title('Male Non Tech Employment', size=40)

#Set x and y labels
plt.xlabel('Date',size=30)
plt.ylabel('No. of employees',size=30)
plt.tick_params(axis='both', which='major', labelsize=20)

#Creating a metric dataframe labelled metric_df to compare predicted vs actual values
metric_df = forecast.set_index('ds')[['yhat']].join(MaleNonTechdf.set_index('ds').y).reset_index()
metric_df.head()

#Importing relevant libraries from sklearn
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

#Ensuring no null values
metric_df.dropna(inplace=True)

#Calculating r2
r2_score(metric_df.y, metric_df.yhat)

#Calculating MSE
mean_squared_error(metric_df.y, metric_df.yhat)

#Calculating MAE
mean_absolute_error(metric_df.y, metric_df.yhat)